# frozen_string_literal: true

require 'json'

class Hangman
  MAX_WRONG_GUESSES = 8

  def initialize
    @dictionary = load_dictionary
    @saves_dir = 'saves'
    Dir.mkdir(@saves_dir) unless Dir.exist?(@saves_dir)
  end

  def start
    puts 'üéØ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –í–ò–°–ï–õ–ò–¶–£!'
    puts '1. –ù–æ–≤–∞—è –∏–≥—Ä–∞'
    puts '2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É'
    print '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç: '

    case gets.chomp.to_i
    when 1 then new_game
    when 2 then load_game_menu
    else puts '–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!'
         start
    end
  end

  private

  def new_game
    @secret_word = select_random_word.downcase
    @guessed_letters = []
    @wrong_guesses = 0
    @game_state = :playing
    play_round
  end

  def load_dictionary
    File.readlines('google-10000-english-no-swears.txt')
        .map(&:chomp)
        .select { |word| word.length.between?(5, 12) }
  rescue Errno::ENOENT
    puts '–§–∞–π–ª —Å–ª–æ–≤–∞—Ä—è –Ω–µ –Ω–∞–π–¥–µ–Ω!'
    puts '–°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ: https://github.com/first20hours/google-10000-english'
    exit
  end

  def select_random_word
    @dictionary.sample
  end

  def play_round
    while @game_state == :playing
      display_game_state
      process_turn
      check_game_state
    end

    display_result
    ask_to_play_again
  end

  def display_game_state
    puts "\n#{'=' * 40}"
    puts "–°–ª–æ–≤–æ: #{display_word}"
    puts "–û—à–∏–±–∫–∏: #{@wrong_guesses}/#{MAX_WRONG_GUESSES}"
    puts "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: #{@guessed_letters.sort.join(', ')}"
    draw_hangman if @wrong_guesses.positive?
  end

  def display_word
    @secret_word.chars.map { |char| @guessed_letters.include?(char) ? char : '_' }.join(' ')
  end

  def draw_hangman
    stages = [
      # 0 –æ—à–∏–±–æ–∫ - –ø—É—Å—Ç–æ
      '',
      # 1 –æ—à–∏–±–∫–∞
      "   ____\n  |    |\n  |    \n  |   \n  |    \n__|__",
      # 2 –æ—à–∏–±–∫–∏
      "   ____\n  |    |\n  |    O\n  |   \n  |    \n__|__",
      # 3 –æ—à–∏–±–∫–∏
      "   ____\n  |    |\n  |    O\n  |    |\n  |    \n__|__",
      # 4 –æ—à–∏–±–∫–∏
      "   ____\n  |    |\n  |    O\n  |   /|\n  |    \n__|__",
      # 5 –æ—à–∏–±–∫–∏
      "   ____\n  |    |\n  |    O\n  |   /|\\\n  |    \n__|__",
      # 6 –æ—à–∏–±–∫–∏
      "   ____\n  |    |\n  |    O\n  |   /|\\\n  |   / \n__|__",
      # 7 –æ—à–∏–±–∫–∏
      "   ____\n  |    |\n  |    O\n  |   /|\\\n  |   / \\\n__|__"
    ]
    puts stages[@wrong_guesses]
  end

  def process_turn
    print "\n–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∏–ª–∏ 'save' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: "
    input = gets.chomp.downcase

    if input == 'save'
      save_game
      puts '–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!'
      return
    end

    if valid_input?(input)
      letter = input[0]
      if @guessed_letters.include?(letter)
        puts '–í—ã —É–∂–µ —É–≥–∞–¥—ã–≤–∞–ª–∏ —ç—Ç—É –±—É–∫–≤—É!'
      else
        @guessed_letters << letter
        unless @secret_word.include?(letter)
          @wrong_guesses += 1
          puts "–ë—É–∫–≤—ã '#{letter}' –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ!"
        end
      end
    else
      puts "–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –±—É–∫–≤—É –∏–ª–∏ 'save'!"
    end
  end

  def valid_input?(input)
    input.length == 1 && input.match?(/[a-z–∞-—è]/i)
  end

  def check_game_state
    if @wrong_guesses >= MAX_WRONG_GUESSES
      @game_state = :lost
    elsif @secret_word.chars.all? { |char| @guessed_letters.include?(char) }
      @game_state = :won
    end
  end

  def display_result
    puts "\n#{'=' * 40}"
    if @game_state == :won
      puts "üéâ –ü–û–ë–ï–î–ê! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: #{@secret_word.upcase}"
    else
      puts "üíÄ –ü–†–û–ò–ì–†–´–®! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: #{@secret_word.upcase}"
      draw_hangman
    end
  end

  def ask_to_play_again
    print "\n–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (y/n): "
    if gets.chomp.downcase == 'y'
      new_game
    else
      puts '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!'
      exit
    end
  end

  def save_game
    save_data = {
      secret_word: @secret_word,
      guessed_letters: @guessed_letters,
      wrong_guesses: @wrong_guesses,
      timestamp: Time.now.strftime('%Y-%m-%d %H:%M:%S')
    }

    filename = "#{@saves_dir}/hangman_#{Time.now.to_i}.json"
    File.write(filename, JSON.pretty_generate(save_data))
    filename
  end

  def load_game_menu
    saves = Dir["#{@saves_dir}/*.json"]

    if saves.empty?
      puts '–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä!'
      start
      return
    end

    puts "\n–°–û–•–†–ê–ù–ï–ù–ù–´–ï –ò–ì–†–´:"
    saves.each_with_index do |save, index|
      data = JSON.parse(File.read(save))
      puts "#{index + 1}. #{File.basename(save)} - #{data['timestamp']}"
    end

    print '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: '
    choice = gets.chomp.to_i - 1

    if choice.between?(0, saves.size - 1)
      load_game(saves[choice])
    else
      puts '–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!'
      load_game_menu
    end
  end

  def load_game(filename)
    data = JSON.parse(File.read(filename))
    @secret_word = data['secret_word']
    @guessed_letters = data['guessed_letters']
    @wrong_guesses = data['wrong_guesses']
    @game_state = :playing

    puts '–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!'
    play_round
  end
end

# –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
if __FILE__ == $PROGRAM_NAME
  # –°–∫–∞—á–∏–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  unless File.exist?('google-10000-english-no-swears.txt')
    puts '–°–∫–∞—á–∏–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å...'
    system('curl -O https://raw.githubusercontent.com/first20hours/google-10000-english/master/google-10000-english-no-swears.txt')
  end

  game = Hangman.new
  game.start
end
