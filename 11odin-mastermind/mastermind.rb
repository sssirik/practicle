# frozen_string_literal: true

class Mastermind
  COLORS = %w[R G B Y P O].freeze # –ö—Ä–∞—Å–Ω—ã–π, –ó–µ–ª–µ–Ω—ã–π, –°–∏–Ω–∏–π, –ñ–µ–ª—Ç—ã–π, –§–∏–æ–ª–µ—Ç–æ–≤—ã–π, –û—Ä–∞–Ω–∂–µ–≤—ã–π
  CODE_LENGTH = 4
  MAX_ATTEMPTS = 12

  def initialize
    puts '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mastermind!'
    puts '–¶–≤–µ—Ç–∞: R(–∫—Ä–∞—Å–Ω—ã–π), G(–∑–µ–ª–µ–Ω—ã–π), B(—Å–∏–Ω–∏–π), Y(–∂–µ–ª—Ç—ã–π), P(—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π), O(–æ—Ä–∞–Ω–∂–µ–≤—ã–π)'
    puts '–ö–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —Ü–≤–µ—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: RGBY'
  end

  def play
    role = choose_role
    if role == 1
      play_as_guesser
    else
      play_as_maker
    end
  end

  private

  def choose_role
    puts "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:"
    puts '1 - –£–≥–∞–¥—ã–≤–∞—é—â–∏–π (–∫–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç –∫–æ–¥)'
    puts '2 - –ó–∞–≥–∞–¥—ã–≤–∞—é—â–∏–π (–≤—ã –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç–µ –∫–æ–¥)'
    print '–í–∞—à –≤—ã–±–æ—Ä (1 –∏–ª–∏ 2): '
    gets.chomp.to_i
  end

  def play_as_guesser
    secret_code = generate_code
    attempts = 0

    puts "\n–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–≥–∞–¥–∞–ª –∫–æ–¥. –£ –≤–∞—Å #{MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫!"

    MAX_ATTEMPTS.times do |attempt|
      attempts = attempt + 1
      puts "\n–ü–æ–ø—ã—Ç–∫–∞ #{attempts}/#{MAX_ATTEMPTS}"

      guess = get_player_guess
      feedback = evaluate_guess(guess, secret_code)

      display_feedback(guess, feedback)

      if guess == secret_code
        puts "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ –∫–æ–¥ –∑–∞ #{attempts} –ø–æ–ø—ã—Ç–æ–∫!"
        return
      end
    end

    puts "üíÄ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –±—ã–ª: #{secret_code.join}"
  end

  def play_as_maker
    secret_code = get_secret_code_from_player
    attempts = 0
    possible_codes = generate_all_possible_codes

    puts "\n–ö–æ–º–ø—å—é—Ç–µ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è —É–≥–∞–¥–∞—Ç—å –≤–∞—à –∫–æ–¥..."

    MAX_ATTEMPTS.times do |attempt|
      attempts = attempt + 1
      computer_guess = computer_make_guess(possible_codes)

      puts "\n–ü–æ–ø—ã—Ç–∫–∞ #{attempts}: #{computer_guess.join}"

      feedback = evaluate_guess(computer_guess, secret_code)
      display_feedback(computer_guess, feedback)

      if computer_guess == secret_code
        puts "ü§ñ –ö–æ–º–ø—å—é—Ç–µ—Ä —É–≥–∞–¥–∞–ª –≤–∞—à –∫–æ–¥ –∑–∞ #{attempts} –ø–æ–ø—ã—Ç–æ–∫!"
        return
      end

      # –£—Ç–æ—á–Ω—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ feedback
      possible_codes.select! do |code|
        evaluate_guess(computer_guess, code) == feedback
      end
    end

    puts 'üéØ –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ —Å–º–æ–≥ —É–≥–∞–¥–∞—Ç—å –≤–∞—à –∫–æ–¥! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!'
  end

  def generate_code
    CODE_LENGTH.times.map { COLORS.sample }
  end

  def get_player_guess
    loop do
      print '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à guess (4 —Ü–≤–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: RGBY): '
      input = gets.chomp.upcase

      return input.chars if valid_guess?(input)

      puts "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–∞: #{COLORS.join(', ')}"
    end
  end

  def get_secret_code_from_player
    loop do
      print '–ó–∞–≥–∞–¥–∞–π—Ç–µ –∫–æ–¥ (4 —Ü–≤–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: RGBY): '
      input = gets.chomp.upcase

      return input.chars if valid_guess?(input)

      puts "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–∞: #{COLORS.join(', ')}"
    end
  end

  def valid_guess?(input)
    input.length == CODE_LENGTH && input.chars.all? { |c| COLORS.include?(c) }
  end

  def evaluate_guess(guess, secret_code)
    exact_matches = 0
    color_matches = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    temp_guess = guess.dup
    temp_secret = secret_code.dup

    # –°–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    CODE_LENGTH.times do |i|
      next unless temp_guess[i] == temp_secret[i]

      exact_matches += 1
      temp_guess[i] = nil
      temp_secret[i] = nil
    end

    # –ó–∞—Ç–µ–º —Å—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
    temp_guess.compact!
    temp_secret.compact!

    temp_guess.each do |color|
      if temp_secret.include?(color)
        color_matches += 1
        temp_secret.delete_at(temp_secret.index(color))
      end
    end

    [exact_matches, color_matches]
  end

  def display_feedback(guess, feedback)
    exact, color = feedback
    puts "Guess: #{guess.join} | ‚úÖ –¢–æ—á–Ω—ã—Ö: #{exact}, üé® –¶–≤–µ—Ç–æ–≤: #{color}"
  end

  def generate_all_possible_codes
    COLORS.repeated_permutation(CODE_LENGTH).to_a
  end

  def computer_make_guess(possible_codes)
    possible_codes.sample
  end
end

# –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
if __FILE__ == $PROGRAM_NAME
  game = Mastermind.new
  game.play
end
